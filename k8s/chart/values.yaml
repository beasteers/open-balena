# Default values for chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Hostname of open-balena instance
hostname: "${OPENBALENA_HOST_NAME}" # OPENBALENA_HOST_NAME

# General configurations
config:
  email: "${OPENBALENA_SUPERUSER_EMAIL}" # OPENBALENA_SUPERUSER_EMAIL
  password: "${OPENBALENA_SUPERUSER_PASSWORD}" # OPENBALENA_SUPERUSER_PASSWORD
  production_mode: "${OPENBALENA_PRODUCTION_MODE}" # OPENBALENA_PRODUCTION_MODE
  ssh_authorized_keys: "${OPENBALENA_SSH_AUTHORIZED_KEYS}" # OPENBALENA_SSH_AUTHORIZED_KEYS

  # NGINX Ingress uses this variable
  # If your containers exceed the size of 200mb, change this!
  client_max_body_size: "200m"

# Deployments
deployments:
  api:
    image: balena/open-balena-api
    version: "${OPENBALENA_API_VERSION_TAG}"
    replicas: 1

    sentry_dsn: ""
    ingress:
      enabled: true
      annotations: {}
      subdomain: api
      tls: true

  vpn:
    image: balena/open-balena-vpn
    version: "${OPENBALENA_VPN_VERSION_TAG}"
    replicas: 1

    sentry_dsn: ""
    ingress:
      enabled: true
      annotations: {}
      subdomain: vpn
      tls: false
      port: 443

  registry:
    image: balena/open-balena-registry
    version: "${OPENBALENA_REGISTRY_VERSION_TAG}"
    replicas: 1
    ingress:
      enabled: false
      annotations: {}
      subdomain: registry
      tls: true

    volume:
      storage: "1Gi"

  s3:
    # You can disable this deployment you want to use another S3 service
    # Just fill the config parts with the correct details
    enabled: true

    image: balena/open-balena-s3
    version: "${OPENBALENA_S3_VERSION_TAG}"
    replicas: 1

    config:
      bucket: "${OPENBALENA_S3_BUCKETS}" # OPENBALENA_S3_BUCKETS / OPENBALENA_REGISTRY2_S3_BUCKET
      endpoint: "${OPENBALENA_S3_ENDPOINT}" # OPENBALENA_S3_ENDPOINT
      region: "${OPENBALENA_S3_REGION}" # OPENBALENA_S3_REGION
      access_key: "${OPENBALENA_S3_ACCESS_KEY}" # OPENBALENA_S3_ACCESS_KEY
      secret_key: "${OPENBALENA_S3_SECRET_KEY}" # OPENBALENA_S3_SECRET_KEY

    ingress:
      enabled: true
      annotations: {}
      subdomain: 's3'
      tls: true

    volume:
      storage: "25Gi"

  db:
    image: balena/open-balena-db
    version: "${OPENBALENA_DB_VERSION_TAG}"
    replicas: 1

    ingress:
      enabled: false
      annotations: {}
      subdomain: db
      tls: true

    volume:
      storage: "1Gi"

  redis:
    # You can disable this deployment you want to use another Redis service
    # Just fill the config parts with the correct details
    enabled: true

    image: redis
    version: "alpine"
    replicas: 1

    ingress:
      enabled: false
      annotations: {}
      subdomain: redis
      tls: true

    config:
      host: "openbalena-redis"
      port: 6379

    volume:
      storage: "1Gi"

ingressAnnotations:
  traefik.ingress.kubernetes.io/router.entrypoints: web,websecure
  traefik.ingress.kubernetes.io/router.tls: "true"
  # cert-manager.io/cluster-issuer: "letsencrypt-prod"
  # kubernetes.io/ingress.class: "nginx"
  # nginx.ingress.kubernetes.io/proxy-body-size: "{{ .Values.config.client_max_body_size }}"

vpnIngressAnnotations:
  traefik.ingress.kubernetes.io/router.entrypoints: web,websecure
  traefik.ingress.kubernetes.io/router.tls: "true"
  # kubernetes.io/ingress.class: "haproxy"
  ingress.kubernetes.io/ssl-redirect: "false"
  # - "traefik.enable=true"
  # - "traefik.tcp.services.openVpn.loadBalancer.server.port=443"
  # - "traefik.tcp.routers.openVpn.rule=HostSNI(`*`)"
  # - "traefik.tcp.routers.openVpn.entrypoints=websecure"

# Keys
keys:
  cookie_secret: "${OPENBALENA_COOKIE_SESSION_SECRET}" # OPENBALENA_COOKIE_SESSION_SECRET
  jwt_secret: ${OPENBALENA_JWT_SECRET} # OPENBALENA_JWT_SECRET
  registry_code: ${OPENBALENA_RESINOS_REGISTRY_CODE} # OPENBALENA_RESINOS_REGISTRY_CODE
  service_api_key: "${OPENBALENA_VPN_SERVICE_API_KEY}" # OPENBALENA_VPN_SERVICE_API_KEY
  api_vpn_service_api_key: "${OPENBALENA_API_VPN_SERVICE_API_KEY}" # OPENBALENA_API_VPN_SERVICE_API_KEY
  registry_secret_key: "${OPENBALENA_REGISTRY_SECRET_KEY}" # OPENBALENA_REGISTRY_SECRET_KEY
  token_auth_builder_token: "${OPENBALENA_TOKEN_AUTH_BUILDER_TOKEN}" # OPENBALENA_TOKEN_AUTH_BUILDER_TOKEN
  token_auth_pub: "${OPENBALENA_TOKEN_AUTH_PUB}" # OPENBALENA_TOKEN_AUTH_PUB
  token_auth_key: "${OPENBALENA_TOKEN_AUTH_KEY}" # OPENBALENA_TOKEN_AUTH_KEY
  token_auth_kid: "${OPENBALENA_TOKEN_AUTH_KID}" # OPENBALENA_TOKEN_AUTH_KID

# Certificates
certificates:  # Root certificates
  root:
    ca: "${OPENBALENA_ROOT_CA}"
    crt: "${OPENBALENA_ROOT_CRT}"
    key: "${OPENBALENA_ROOT_KEY}"
  vpn:
    ca: "${OPENBALENA_VPN_CA}"
    ca-chain: "${OPENBALENA_VPN_CA_CHAIN}"
    crt: "${OPENBALENA_VPN_SERVER_CRT}"
    server-key: "${OPENBALENA_VPN_SERVER_KEY}"
    dh: "${OPENBALENA_VPN_SERVER_DH}"

# ##
# ## HAProxy Ingress Chart
# ##
# ## https://github.com/helm/charts/blob/master/incubator/haproxy-ingress/values.yaml
# ##
# haproxy:
#   controller:
#     service:
#       annotations:
#         # Add DigitalOcean LoadBalancer label
#         service.beta.kubernetes.io/do-loadbalancer-name: "k8s-openbalena-vpn"
#         service.beta.kubernetes.io/do-loadbalancer-hostname: "vpn.${OPENBALENA_HOST_NAME}"
#
#       # Change the HTTPS port
#       httpsPorts:
#       - port: 8443
#         targetPort: https
#
#     # Add TCP proxies for the VPN
#     tcp:
#       443: "{{ .Release.Namespace }}/openbalena-vpn:443::PROXY-V2"
#       3128: "{{ .Release.Namespace }}/openbalena-vpn:3128"
#
# ##
# ## NGINX Ingress Chart$
# ##
# ## https://github.com/kubernetes/ingress-nginx/blob/master/charts/ingress-nginx/values.yaml
# ##
# nginx:
#   controller:
#     service:
#       annotations:
#         # Add DigitalOcean LoadBalancer label
#         service.beta.kubernetes.io/do-loadbalancer-name: "k8s-openbalena"
#         service.beta.kubernetes.io/do-loadbalancer-hostname: "${OPENBALENA_HOST_NAME}"
